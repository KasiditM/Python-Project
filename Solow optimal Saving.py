# 
# ùë¶ùë°=ùëì(ùëòùë°)=ùëòŒ±ùë° 
# ùëòùë°+1=(1‚àíùëë)ùëòùë°+ùë†ùë¶ùë°
Œ±=0.9,ùëë=0.1,s=s,ùëò1=0.1

# Generate
# generate : s = [0.01,0.02 ...] 500 ‡∏ï‡∏±‡∏ß ‡πÉ‡∏ä‡πâ numpy
import numpy as np
s_rates = np.linspace(0,1,100) # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0 ‡∏à‡∏ö‡∏ó‡∏µ‡πà 1 ‡∏°‡∏µ 100 ‡∏ï‡∏±‡∏ß
s_rates

# For each value of s_rates find consumption at t=500
# c500 is optimal consumption in RL

# For loop function calculate y[t] and k[t] for s=0 normal one!
s = 0; alpha = 0.9; d = 0.1
y = [0]*502; k = [0]*502; k[1] = 0.1
for t in range(1,501):
  y[t] = k[t]**alpha
  k[t+1] = (1-d)*k[t] + s*y[t]
# We got function y[t] and k[t] for t in range(1,502)
# !!!Not considered s rate!!!

# Generate consumption eauation | from theory C[t] = y[t] - sy[t]
c500 = y[500] - s*y[500]
c500

# For loop function calculate y[t] and k[t] for each s
c500 = []
for s in s_rates:
  alpha = 0.9; d = 0.1;
  y = [0]*502; k = [0]*502; k[1] = 0.1
  for t in range(1,501):
    y[t] = k[t]**alpha
    k[t+1] = (1-d)*k[t] + s*y[t]
  c500.append(y[500] - s*y[500]) # List of max C with different s

print(f'Optimal saving rate = {s_rates[np.argmax(c500)]}')
# From theory optimal S is give the highest consumption
# s_rates[np.argmax(c500)]
# np.argmax(c500) --> ‡πÉ‡∏´‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á C500
# s_rates[‡∏ï‡∏≥‡πà‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á C500] --> s_rates ‡πÄ‡∏õ‡πá‡∏ô List ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà Max consumption ‡πÉ‡∏´‡πâ optimal Saving ‡∏î‡πâ‡∏ß‡∏¢
# ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô c500 = ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á s_rates ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô

# As we know optimal saving rate = max consumption
# Can we see it in chart?
import matplotlib.pyplot as plt
plt.plot(s_rates, c500)
plt.title('Saving and long run consumption')
plt.xlabel('saving rate')
plt.ylabel('c500')
plt.show()
